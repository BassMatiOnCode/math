<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2022-02-09" editor="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2022-07-07" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2022-07-11" />
<meta name="version" content="1" />
<meta name="categories" content="Math > Calculus > Matrix" />
<meta name="tags" content="math, calculus, algebra, matrix, calculator, multiplication" />
<meta name="description" content="Calculates the product of two matrices." />

<!-- script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js" id=""></script> -->

<link rel="stylesheet" href="/inc/page.css" />
<style>
math { font-family : 'Latin Modern Math', 'Stix Two Math', 'Cambria Math' ; }
table { margin-top : 20px ; margin-bottom : 20px }
table.matrix-multiplication table { margin : 0px }
</style>
<title>Math > Matrix > Calculator</title>

</head><body><header id="page-header"></header><div id="main-toolbar"></div><main id="page-content">

<h1>Matrix Calculator</h1>

<p id="page-abstract"></p>

<p>First, set the size of the matrices A and B, then click the <tt>Generate</tt> button. Next, edit the cell values, then click <tt>Calculate</tt>. The result appears in the matrix C, according to the <a href="matrix.htm#multiplication-layout">suggested layout</a>.</p>

<style>
table#matrix-multiplication-0 tr td:first-child { text-align:right }
table#matrix-multiplication-0 tr td:nth-child(2) { padding-left:10px ; padding-right:10px }
</style>

<table class="no-borders" id="matrix-multiplication-0">
<colgroup>
<col />
<col width="20" />
</colgroup>
<tbody>
<tr><td>Height of A:</td><td contentEditable="true">2</td></tr>
<tr><td>Width of A = height of B:</td><td contentEditable="true">2</td></tr>
<tr><td>Width of B:</td><td contentEditable="true">3</td></tr>
</tbody>
</table>

<p><button onclick="generateMultiplicationTables( )">Generate</button></p>

<script>
function setResultColumnWidth( column ) {
	/// Calculates the width of columns of matrices B and C.
	let matrix2 = document.getElementById( "matrix-multiplication-2" );
	let matrix3 = document.getElementById( "matrix-multiplication-3" );
	// We base the decision on the width of the cell, depending on the cell content.
	let w = Math.max( matrix2.rows[ 0 ].cells[ column ].offsetWidth, matrix3.rows[ 0 ].cells[ column ].offsetWidth ) + "px" ;
	matrix2.querySelector( `COLGROUP>COL:nth-child(${column+1})` ).style.width = w ;	
	matrix3.querySelector( `COLGROUP>COL:nth-child(${column+1})` ).style.width = w ;	
	}
function adjustResultColumnsWidth ( ) {
	/// Sets the width of matrix 2 and 3 columns so that they match. 
	let matrix2 = document.getElementById( "matrix-multiplication-2" );
	let matrix3 = document.getElementById( "matrix-multiplication-3" );
	let row = matrix3.rows[ 0 ]; 
	for ( let i = 0 ; i < row.cells.length ; i ++ ) setResultColumnWidth( i );
	}
function buildTable( id, rows, columns, editable=true, defaultValue="0", ...initValues ) {
	/// Builds a matrix table.
	/// Returns the a reference to the table element.
	let table = document.getElementById( id );
	table.removeChild( table.tBodies[0] );
	let colgrp = table.querySelector( "COLGROUP" );
	if ( colgrp ) table.removeChild( colgrp );
	let body = table.createTBody( );
	let colgroup = table.insertBefore( document.createElement( "COLGROUP" ), body );
	for ( let i = 0 ; i < columns ; i ++ ) colgroup.insertBefore( document.createElement( "COL" ), null );
	function handleGetFocus( ) {
		/// Selects the cell content when focused
		let evt = window.event;
		const selection = window.getSelection( );
		selection.removeAllRanges( );
		const range = document.createRange( );
		range.selectNodeContents( evt.target );
		selection.addRange( range );
		}
	function handleCellInput( ) {
		let cell = window.event.target;
		let table = cell.parentNode.parentNode.parentNode;
		if ( table.id === "matrix-multiplication-1" ) return ;
		setResultColumnWidth( cell.cellIndex );
		}
	for ( let i = 0, k = 0 ; i < rows ; i++ ) {
		let row = body.insertRow( -1 );
		for ( let j = 0 ; j < columns ; j++ , k++) {
			let cell = row.insertCell( -1 );
			cell.addEventListener( "focus", handleGetFocus );
			cell.addEventListener( "input", handleCellInput );
			cell.innerText = initValues[ k ] === undefined ? defaultValue : initValues[ k ] ;
			if ( editable ) {
				cell.setAttribute( "contentEditable", "true" );
				cell.tabindex = "0" ;
		}	}	}	
	return table;
	}
function generateMultiplicationTables( ) {
	/// Generates the matrix tables from input fields
	let o = document.getElementById( "matrix-multiplication-0" );
	let ha = o.tBodies[0].rows[0].cells[1].innerText;
	let wa = o.tBodies[0].rows[1].cells[1].innerText;
	let wb = o.tBodies[0].rows[2].cells[1].innerText;
	// Build the matrix tables
	buildTable( "matrix-multiplication-1", ha, wa );
	buildTable( "matrix-multiplication-2", wa, wb );
	buildTable( "matrix-multiplication-3", ha, wb, false );
	// Fill matrices with demo content
	function fillMatrixTable( id, ...values ) {
		/// Fills a matrix table from a list of values.
		let i = 0 ;
		let rows = document.getElementById( id ).rows;
		for ( j = 0 ; j < rows.length ; j++ ) {
			let row = rows[ j ];
			for ( k = 0 ; k < row.cells.length ; k ++ ) row.cells[ k ].innerText = values[ i++ ];
		}	}
//	fillMatrixTable( "matrix-multiplication-1", 2, -1, 3, 2 );
//	fillMatrixTable( "matrix-multiplication-2", 1, 4, -2, 3, 0, 2 );
	// Set the initial width of columns for matrix 2 and 3
	let cells = document.getElementById( "matrix-multiplication-2" ).rows[ 0 ].cells ;
	for ( let i = 0 ; i < cells.length ; i ++ ) setResultColumnWidth( cells[ i ].cellIndex );
	}
function calculateMatrixMultiplicationResult( ) {
	let matrix1 = document.getElementById( "matrix-multiplication-1" );
	let matrix2 = document.getElementById( "matrix-multiplication-2" );
	let matrix3 = document.getElementById( "matrix-multiplication-3" );
	// Calculate cells
	function calculateCell( row, column ) {
		let v = 0 ;
		for ( i = 0 ; i < matrix1.rows[ 0 ].cells.length ; i ++ ) v += matrix1.rows[ row ].cells[ i ].innerText * matrix2.rows[ i ].cells[ column ].innerText ;
		return v.toString( );
		}
	for ( let i = 0 ; i < matrix3.rows.length ; i ++ ) {
		let row = matrix3.rows[ i ];
		for ( let j = 0 ; j < row.cells.length ; j ++ ) row.cells[ j ].innerText = calculateCell( i, j );
		}
	// Calculate new column widths
	for ( let i = 0, w= 0, cells = matrix3.rows[ 0 ].cells ; i < cells.length ; i ++ ) setResultColumnWidth( cells[ i ].cellIndex );
	}
function moveResultTo( targetMatrix ) {
	let o = document.getElementById( "matrix-multiplication-0" );
	let wa = o.tBodies[0].rows[0].cells[1].innerText;
	let ha = o.tBodies[0].rows[1].cells[1].innerText;
	let wb = o.tBodies[0].rows[2].cells[1].innerText;
	let target = document.getElementById( targetMatrix );
	let source = document.getElementById( "matrix-multiplication-3" );
	let cells = source.querySelectorAll( "TD" );
	let initValues = [ ] ;
	for ( let i = 0 ; i < cells.length ; i ++ ) initValues[ i ] = cells[ i ].innerText ; 
	switch ( targetMatrix ) {
	case "matrix-multiplication-1" :
		// Result to a
		wa = source.rows[0].cells.length;
		ha = source.rows.length;
		o.tBodies[0].rows[0].cells[1].innerText = wa;
		o.tBodies[0].rows[1].cells[1].innerText = ha;
		buildTable( "matrix-multiplication-1", ha, wa, true, "0", ...initValues );
		buildTable( "matrix-multiplication-2", wa, wb );
		buildTable( "matrix-multiplication-3", ha, wb, false );
		adjustResultColumnsWidth( );
		break;
	case "matrix-multiplication-2" :
		// Result to b
		wb = source.rows[ 0 ].cells.length;
		wa = source.rows.length;
		o.tBodies[0].rows[2].cells[1].innerText = wb;
		o.tBodies[0].rows[0].cells[1].innerText = wa;
		buildTable( "matrix-multiplication-1", ha, wa );
		buildTable( "matrix-multiplication-2", wa, wb, true, "0", ...initValues );
		buildTable( "matrix-multiplication-3", ha, wb, false );
		adjustResultColumnsWidth( );
		break;		
		}
	}
</script>

<table class="matrix-multiplication" style="text-align:center"><tr>
	<td>&nbsp;</td>
	<td><table id="matrix-multiplication-2" class="flat-borders"><tbody></tbody></table></td>
</tr><tr>
	<td><table id="matrix-multiplication-1" class="flat-borders"><tbody></tbody></table></td>
	<td><table id="matrix-multiplication-3" class="flat-borders"><tbody></tbody></table></td>
</tr></table>

<p><button onclick="calculateMatrixMultiplicationResult( )">Calculate</button> 
	<button onclick="moveResultTo( 'matrix-multiplication-1'  )">Result to A</button> 
	<button onclick="moveResultTo( 'matrix-multiplication-2'  )">Result to B</button>
	</p>

</main><footer id="page-footer"></footer><script type="module" src="/inc/page.js" ></script></body></html>